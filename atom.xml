<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CuZaoo的程序文档</title>
  
  <subtitle>一个啥活都参与的程序员</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-06-01T03:06:57.775Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>CuZaoo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo 相关知识</title>
    <link href="http://example.com/2025/06/01/Hexo%20%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
    <id>http://example.com/2025/06/01/Hexo%20%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</id>
    <published>2025-06-01T02:00:00.000Z</published>
    <updated>2025-06-01T03:06:57.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hexo-相关知识"><a href="#Hexo-相关知识" class="headerlink" title="Hexo 相关知识"></a>Hexo 相关知识</h1><h2 id="一-什么是Hexo？"><a href="#一-什么是Hexo？" class="headerlink" title="一.什么是Hexo？"></a>一.什么是Hexo？</h2><p>核心定义：一个快速、简洁且高效的静态博客框架</p><p>工作原理：使用 Markdown（或其他标记语言）编写内容，通过 Hexo 引擎解析，结合主题模板，生成静态 HTML、CSS、JavaScript 文件。</p><p>技术栈：基于 Node.js 运行</p><h2 id="二-如何安装和部署？"><a href="#二-如何安装和部署？" class="headerlink" title="二.如何安装和部署？"></a>二.如何安装和部署？</h2><p><strong>安装</strong></p><ol><li>前提：安装 Node.js (&gt;= 12.0) 和 Git。</li><li>全局安装 Hexo CLI: npm install -g hexo-cli</li><li>初始化项目：hexo init folder_name</li><li>进入项目目录：cd folder_name</li><li>安装依赖：npm install</li><li>本地预览：hexo server (hexo s)</li></ol><p><strong>部署</strong></p><ol><li>配置 _config.yml： 设置 url, root, 最重要的是 deploy 部分（配置类型如 git, 仓库地址、分支）。</li><li>安装部署插件： 常用 hexo-deployer-git: npm install hexo-deployer-git —save</li><li>生成 &amp; 部署： hexo clean &amp;&amp; hexo deploy (hexo clean &amp;&amp; hexo d)</li></ol><h2 id="三-目录构成"><a href="#三-目录构成" class="headerlink" title="三.目录构成"></a>三.目录构成</h2><ul><li>_config.yml (站点配置文件)： 全局配置（标题、描述、URL、主题、部署设置等）。功能： 控制整个站点的行为。部署： 随源码一起。</li><li>source/ 目录： 存放用户内容（Markdown 文件 _posts/, _drafts/，图片、CSS/JS 资源等）。功能： 内容核心。部署： 源文件随源码；生成的静态资源在 public/。</li><li>themes/ 目录： 存放主题。功能： 定义网站外观、布局和功能扩展点。部署： 主题作为项目子模块或直接复制，随源码一起；主题的静态文件在构建时也会被处理复制到 public/。</li><li>scaffolds/ 目录： 模板文件。功能： 定义 hexo new 命令生成新文章、页面等的初始结构。部署： 仅开发时使用，不部署。</li><li>public/ 目录 (生成)： 存放最终生成的静态网站文件。功能： 部署的内容。部署： 仅 这个目录的内容需要部署到服务器/CDN。通常由部署命令自动完成。</li><li>node_modules/ 目录： 存放 npm 依赖（Hexo 核心、插件、主题依赖）。功能： 运行和构建所需。部署： 绝不 部署此目录。由 .gitignore 排除。</li></ul><h2 id="四-Hexo-极简命令速查表"><a href="#四-Hexo-极简命令速查表" class="headerlink" title="四.Hexo 极简命令速查表"></a>四.Hexo 极简命令速查表</h2><div class="table-container"><table><thead><tr><th style="text-align:left">场景</th><th style="text-align:left">完整命令</th><th style="text-align:left">简写命令</th><th style="text-align:left">作用说明</th></tr></thead><tbody><tr><td style="text-align:left">写新文章</td><td style="text-align:left"><code>hexo new &quot;标题&quot;</code></td><td style="text-align:left"><code>hexo n</code></td><td style="text-align:left">在 <code>source/_posts</code> 下创建文章</td></tr><tr><td style="text-align:left">本地预览</td><td style="text-align:left"><code>hexo server</code></td><td style="text-align:left"><code>hexo s</code></td><td style="text-align:left">启动本地服务器（默认4000端口）</td></tr><tr><td style="text-align:left">生成静态页</td><td style="text-align:left"><code>hexo generate</code></td><td style="text-align:left"><code>hexo g</code></td><td style="text-align:left">生成静态HTML到 <code>public</code> 目录</td></tr><tr><td style="text-align:left">部署到网站</td><td style="text-align:left"><code>hexo deploy</code></td><td style="text-align:left"><code>hexo d</code></td><td style="text-align:left">发布到GitHub Pages等托管平台</td></tr><tr><td style="text-align:left">清理缓存</td><td style="text-align:left"><code>hexo clean</code></td><td style="text-align:left">无简写</td><td style="text-align:left">清除缓存和旧生成文件</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">介绍 Hexo 的定义、安装部署流程、目录结构及常用命令速查。</summary>
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="静态博客" scheme="http://example.com/tags/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Node.js" scheme="http://example.com/tags/Node-js/"/>
    
    <category term="部署" scheme="http://example.com/tags/%E9%83%A8%E7%BD%B2/"/>
    
    <category term="目录结构" scheme="http://example.com/tags/%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    
    <category term="命令" scheme="http://example.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>问题</title>
    <link href="http://example.com/2025/03/05/%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2025/03/05/%E9%97%AE%E9%A2%98/</id>
    <published>2025-03-05T14:55:47.000Z</published>
    <updated>2025-06-01T03:08:39.553Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">记录可能会整理成文档的问题</span><br></pre></td></tr></table></figure><ul><li>[ ]  1.为什么要前端工程化？传统开发的弊端？工程化带来的优势？</li><li>[ ]  2.Vue3的统一目录结构？</li><li>[ ]  3.如何统一代码风格？</li><li>[ ]  4.Vue的相关信息？Vue历史</li><li>[ ]  5.Vue 虚拟Dom（<a href="https://cn.vuejs.org/guide/extras/rendering-mechanism.html）？">https://cn.vuejs.org/guide/extras/rendering-mechanism.html）？</a> Diff算法？</li><li>[ ]  6.浏览器的回流和重绘？</li><li>[ ]  7.Vue3组合式API</li><li>[ ]  8.Vue封装常用函数</li><li>[ ]  9.Vue是怎么解决传统开发中的页面跳转的？</li><li>[ ]  10.现代化开发的概念？SPA / SSR / SSG？同构渲染？预渲染？ISR/DPR?</li><li>[ ]  11.服务端开发？APP开发？桌面程序开发？应用脚本开发？</li><li>[ ]  12.构建工具的好处</li><li>[ ]  13.单组件编写：</li></ul>]]></content>
    
    
    <summary type="html">汇总前端开发常见问题，包括工程化、Vue、虚拟DOM、现代化开发、构建工具等内容，便于后续整理成文档。</summary>
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="知识整理" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    
    
    <category term="前端工程化" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    <category term="Vue" scheme="http://example.com/tags/Vue/"/>
    
    <category term="代码风格" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
    
    <category term="虚拟DOM" scheme="http://example.com/tags/%E8%99%9A%E6%8B%9FDOM/"/>
    
    <category term="Diff算法" scheme="http://example.com/tags/Diff%E7%AE%97%E6%B3%95/"/>
    
    <category term="浏览器" scheme="http://example.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    <category term="组合式API" scheme="http://example.com/tags/%E7%BB%84%E5%90%88%E5%BC%8FAPI/"/>
    
    <category term="SPA" scheme="http://example.com/tags/SPA/"/>
    
    <category term="SSR" scheme="http://example.com/tags/SSR/"/>
    
    <category term="SSG" scheme="http://example.com/tags/SSG/"/>
    
    <category term="构建工具" scheme="http://example.com/tags/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>[JS]讨论null和undefined的区分和使用场景</title>
    <link href="http://example.com/2025/02/26/JS-%E8%AE%A8%E8%AE%BAnull%E5%92%8Cundefined%E7%9A%84%E5%8C%BA%E5%88%86%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>http://example.com/2025/02/26/JS-%E8%AE%A8%E8%AE%BAnull%E5%92%8Cundefined%E7%9A%84%E5%8C%BA%E5%88%86%E5%92%8C%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/</id>
    <published>2025-02-26T14:49:03.000Z</published>
    <updated>2025-06-01T03:03:54.131Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-中-null-和-undefined-的区别及使用场景"><a href="#JavaScript-中-null-和-undefined-的区别及使用场景" class="headerlink" title="JavaScript 中 null 和 undefined 的区别及使用场景"></a>JavaScript 中 <code>null</code> 和 <code>undefined</code> 的区别及使用场景</h1><h2 id="1-为什么存在-null-和-undefined"><a href="#1-为什么存在-null-和-undefined" class="headerlink" title="1. 为什么存在 null 和 undefined"></a>1. 为什么存在 <code>null</code> 和 <code>undefined</code></h2><p>在 JavaScript 中，<code>null</code> 和 <code>undefined</code> 是为了表示两种不同概念：</p><ul><li><strong><code>undefined</code></strong>：表示变量已声明，但尚未赋值。</li><li><strong><code>null</code></strong>：表示变量已赋值，但特意赋为 “空值”。</li></ul><hr><h2 id="2-区别详解"><a href="#2-区别详解" class="headerlink" title="2. 区别详解"></a>2. 区别详解</h2><h3 id="1-语义"><a href="#1-语义" class="headerlink" title="(1) 语义"></a><strong>(1) 语义</strong></h3><ul><li><strong><code>undefined</code></strong>：表示变量已声明，但尚未初始化。</li><li><strong><code>null</code></strong>：表示变量有意被赋值为空，通常用于表示对象引用的“空状态”。</li></ul><hr><h3 id="2-类型"><a href="#2-类型" class="headerlink" title="(2) 类型"></a><strong>(2) 类型</strong></h3><ul><li><code>undefined</code> 是原始值，属于 <strong>undefined 类型</strong>。</li><li><code>null</code> 是原始值，属于 <strong>object 类型</strong>（这是一个历史遗留问题）。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">// &quot;undefined&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);      <span class="comment">// &quot;object&quot;</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-比较"><a href="#3-比较" class="headerlink" title="(3) 比较"></a><strong>(3) 比较</strong></h3><ul><li><code>松散比较 ==</code>:<code>null==undefined</code>为<code>true</code>,这是一个强制规定</li><li><code>严格比较 ===</code>: <code>null==undefined</code>为<code>false</code>,因为类型不同</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == <span class="literal">undefined</span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-使用场景"><a href="#3-使用场景" class="headerlink" title="3. 使用场景"></a>3. 使用场景</h2><h3 id="1-使用-undefined"><a href="#1-使用-undefined" class="headerlink" title="(1) 使用 undefined"></a>(1) 使用 <code>undefined</code></h3><ul><li><code>undefined</code> 通常由 JavaScript 自动分配，不需要显式赋值：<ul><li>表示变量 “未被赋值”。</li><li>表示对象属性不存在。</li><li>表示函数参数未传递。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量未赋值</span></span><br><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 输出 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象属性不存在</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">value</span>); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数参数未传递</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">param</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(param); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>();</span><br></pre></td></tr></table></figure><h3 id="2-使用-null"><a href="#2-使用-null" class="headerlink" title="(2) 使用 null"></a>(2) 使用 <code>null</code></h3><ul><li><code>null</code> 需要开发者主动赋值，用于表示 “空值” 或 “空对象”：<ul><li>初始化一个变量，表示未来会赋值。</li><li>表示资源尚未分配或不需要时显式清空。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化为空值</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一开始未初始化对象</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isDataReady</span>()) &#123;</span><br><span class="line">    person = &#123;<span class="attr">name</span>: <span class="string">&quot;John&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="4-默认值为-undefined"><a href="#4-默认值为-undefined" class="headerlink" title="4. 默认值为 undefined"></a>4. 默认值为 undefined</h2><p>如果声明了变量但没有赋值，它的默认值为 undefined：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">介绍JavaScript中null和undefined的区别、类型、比较和常见使用场景。</summary>
    
    
    
    <category term="JavaScript" scheme="http://example.com/categories/JavaScript/"/>
    
    
    <category term="undefined" scheme="http://example.com/tags/undefined/"/>
    
    <category term="类型判断" scheme="http://example.com/tags/%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    
    <category term="使用场景" scheme="http://example.com/tags/%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    
  </entry>
  
</feed>
